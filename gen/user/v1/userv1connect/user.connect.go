// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/sansan36/authorization-service/gen/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUserListProcedure is the fully-qualified name of the UserService's GetUserList RPC.
	UserServiceGetUserListProcedure = "/user.v1.UserService/GetUserList"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/user.v1.UserService/GetUser"
	// UserServiceAddUserProcedure is the fully-qualified name of the UserService's AddUser RPC.
	UserServiceAddUserProcedure = "/user.v1.UserService/AddUser"
	// UserServiceEditUserProcedure is the fully-qualified name of the UserService's EditUser RPC.
	UserServiceEditUserProcedure = "/user.v1.UserService/EditUser"
	// UserServiceRemoveUserProcedure is the fully-qualified name of the UserService's RemoveUser RPC.
	UserServiceRemoveUserProcedure = "/user.v1.UserService/RemoveUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServiceServiceDescriptor           = v1.File_user_v1_user_proto.Services().ByName("UserService")
	userServiceGetUserListMethodDescriptor = userServiceServiceDescriptor.Methods().ByName("GetUserList")
	userServiceGetUserMethodDescriptor     = userServiceServiceDescriptor.Methods().ByName("GetUser")
	userServiceAddUserMethodDescriptor     = userServiceServiceDescriptor.Methods().ByName("AddUser")
	userServiceEditUserMethodDescriptor    = userServiceServiceDescriptor.Methods().ByName("EditUser")
	userServiceRemoveUserMethodDescriptor  = userServiceServiceDescriptor.Methods().ByName("RemoveUser")
)

// UserServiceClient is a client for the user.v1.UserService service.
type UserServiceClient interface {
	GetUserList(context.Context, *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	AddUser(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error)
	EditUser(context.Context, *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error)
	RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error)
}

// NewUserServiceClient constructs a client for the user.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getUserList: connect.NewClient[v1.GetUserListRequest, v1.GetUserListResponse](
			httpClient,
			baseURL+UserServiceGetUserListProcedure,
			connect.WithSchema(userServiceGetUserListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addUser: connect.NewClient[v1.AddUserRequest, v1.AddUserResponse](
			httpClient,
			baseURL+UserServiceAddUserProcedure,
			connect.WithSchema(userServiceAddUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		editUser: connect.NewClient[v1.EditUserRequest, v1.EditUserResponse](
			httpClient,
			baseURL+UserServiceEditUserProcedure,
			connect.WithSchema(userServiceEditUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeUser: connect.NewClient[v1.RemoveUserRequest, v1.RemoveUserResponse](
			httpClient,
			baseURL+UserServiceRemoveUserProcedure,
			connect.WithSchema(userServiceRemoveUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUserList *connect.Client[v1.GetUserListRequest, v1.GetUserListResponse]
	getUser     *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	addUser     *connect.Client[v1.AddUserRequest, v1.AddUserResponse]
	editUser    *connect.Client[v1.EditUserRequest, v1.EditUserResponse]
	removeUser  *connect.Client[v1.RemoveUserRequest, v1.RemoveUserResponse]
}

// GetUserList calls user.v1.UserService.GetUserList.
func (c *userServiceClient) GetUserList(ctx context.Context, req *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error) {
	return c.getUserList.CallUnary(ctx, req)
}

// GetUser calls user.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// AddUser calls user.v1.UserService.AddUser.
func (c *userServiceClient) AddUser(ctx context.Context, req *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error) {
	return c.addUser.CallUnary(ctx, req)
}

// EditUser calls user.v1.UserService.EditUser.
func (c *userServiceClient) EditUser(ctx context.Context, req *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error) {
	return c.editUser.CallUnary(ctx, req)
}

// RemoveUser calls user.v1.UserService.RemoveUser.
func (c *userServiceClient) RemoveUser(ctx context.Context, req *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error) {
	return c.removeUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the user.v1.UserService service.
type UserServiceHandler interface {
	GetUserList(context.Context, *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	AddUser(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error)
	EditUser(context.Context, *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error)
	RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceGetUserListHandler := connect.NewUnaryHandler(
		UserServiceGetUserListProcedure,
		svc.GetUserList,
		connect.WithSchema(userServiceGetUserListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceAddUserHandler := connect.NewUnaryHandler(
		UserServiceAddUserProcedure,
		svc.AddUser,
		connect.WithSchema(userServiceAddUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceEditUserHandler := connect.NewUnaryHandler(
		UserServiceEditUserProcedure,
		svc.EditUser,
		connect.WithSchema(userServiceEditUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRemoveUserHandler := connect.NewUnaryHandler(
		UserServiceRemoveUserProcedure,
		svc.RemoveUser,
		connect.WithSchema(userServiceRemoveUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUserListProcedure:
			userServiceGetUserListHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceAddUserProcedure:
			userServiceAddUserHandler.ServeHTTP(w, r)
		case UserServiceEditUserProcedure:
			userServiceEditUserHandler.ServeHTTP(w, r)
		case UserServiceRemoveUserProcedure:
			userServiceRemoveUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUserList(context.Context, *connect.Request[v1.GetUserListRequest]) (*connect.Response[v1.GetUserListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetUserList is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) AddUser(context.Context, *connect.Request[v1.AddUserRequest]) (*connect.Response[v1.AddUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.AddUser is not implemented"))
}

func (UnimplementedUserServiceHandler) EditUser(context.Context, *connect.Request[v1.EditUserRequest]) (*connect.Response[v1.EditUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.EditUser is not implemented"))
}

func (UnimplementedUserServiceHandler) RemoveUser(context.Context, *connect.Request[v1.RemoveUserRequest]) (*connect.Response[v1.RemoveUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.v1.UserService.RemoveUser is not implemented"))
}
