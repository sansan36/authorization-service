// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/common.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StandardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StandardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StandardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StandardResponseMultiError, or nil if none found.
func (m *StandardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StandardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Code

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return StandardResponseMultiError(errors)
	}

	return nil
}

// StandardResponseMultiError is an error wrapping multiple validation errors
// returned by StandardResponse.ValidateAll() if the designated constraints
// aren't met.
type StandardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StandardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StandardResponseMultiError) AllErrors() []error { return m }

// StandardResponseValidationError is the validation error returned by
// StandardResponse.Validate if the designated constraints aren't met.
type StandardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StandardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StandardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StandardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StandardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StandardResponseValidationError) ErrorName() string { return "StandardResponseValidationError" }

// Error satisfies the builtin error interface
func (e StandardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStandardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StandardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StandardResponseValidationError{}

// Validate checks the field values on StandardQuery with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StandardQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StandardQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StandardQueryMultiError, or
// nil if none found.
func (m *StandardQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *StandardQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return StandardQueryMultiError(errors)
	}

	return nil
}

// StandardQueryMultiError is an error wrapping multiple validation errors
// returned by StandardQuery.ValidateAll() if the designated constraints
// aren't met.
type StandardQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StandardQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StandardQueryMultiError) AllErrors() []error { return m }

// StandardQueryValidationError is the validation error returned by
// StandardQuery.Validate if the designated constraints aren't met.
type StandardQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StandardQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StandardQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StandardQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StandardQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StandardQueryValidationError) ErrorName() string { return "StandardQueryValidationError" }

// Error satisfies the builtin error interface
func (e StandardQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStandardQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StandardQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StandardQueryValidationError{}

// Validate checks the field values on StandardPaginationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StandardPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StandardPaginationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StandardPaginationResponseMultiError, or nil if none found.
func (m *StandardPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StandardPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Total

	// no validation rules for Found

	if len(errors) > 0 {
		return StandardPaginationResponseMultiError(errors)
	}

	return nil
}

// StandardPaginationResponseMultiError is an error wrapping multiple
// validation errors returned by StandardPaginationResponse.ValidateAll() if
// the designated constraints aren't met.
type StandardPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StandardPaginationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StandardPaginationResponseMultiError) AllErrors() []error { return m }

// StandardPaginationResponseValidationError is the validation error returned
// by StandardPaginationResponse.Validate if the designated constraints aren't met.
type StandardPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StandardPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StandardPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StandardPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StandardPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StandardPaginationResponseValidationError) ErrorName() string {
	return "StandardPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StandardPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStandardPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StandardPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StandardPaginationResponseValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetHttpStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "HttpStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorResponseValidationError{
					field:  "HttpStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorResponseValidationError{
				field:  "HttpStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}
