// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protoc-gen-gorm/types/types.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UUIDValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UUIDValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UUIDValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UUIDValueMultiError, or nil
// if none found.
func (m *UUIDValue) ValidateAll() error {
	return m.validate(true)
}

func (m *UUIDValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return UUIDValueMultiError(errors)
	}

	return nil
}

// UUIDValueMultiError is an error wrapping multiple validation errors returned
// by UUIDValue.ValidateAll() if the designated constraints aren't met.
type UUIDValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UUIDValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UUIDValueMultiError) AllErrors() []error { return m }

// UUIDValueValidationError is the validation error returned by
// UUIDValue.Validate if the designated constraints aren't met.
type UUIDValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UUIDValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UUIDValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UUIDValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UUIDValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UUIDValueValidationError) ErrorName() string { return "UUIDValueValidationError" }

// Error satisfies the builtin error interface
func (e UUIDValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUUIDValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UUIDValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UUIDValueValidationError{}

// Validate checks the field values on JSONValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JSONValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JSONValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JSONValueMultiError, or nil
// if none found.
func (m *JSONValue) ValidateAll() error {
	return m.validate(true)
}

func (m *JSONValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return JSONValueMultiError(errors)
	}

	return nil
}

// JSONValueMultiError is an error wrapping multiple validation errors returned
// by JSONValue.ValidateAll() if the designated constraints aren't met.
type JSONValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JSONValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JSONValueMultiError) AllErrors() []error { return m }

// JSONValueValidationError is the validation error returned by
// JSONValue.Validate if the designated constraints aren't met.
type JSONValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSONValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSONValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSONValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSONValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSONValueValidationError) ErrorName() string { return "JSONValueValidationError" }

// Error satisfies the builtin error interface
func (e JSONValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSONValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSONValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSONValueValidationError{}

// Validate checks the field values on UUID with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *UUID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UUID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UUIDMultiError, or nil if none found.
func (m *UUID) ValidateAll() error {
	return m.validate(true)
}

func (m *UUID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return UUIDMultiError(errors)
	}

	return nil
}

// UUIDMultiError is an error wrapping multiple validation errors returned by
// UUID.ValidateAll() if the designated constraints aren't met.
type UUIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UUIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UUIDMultiError) AllErrors() []error { return m }

// UUIDValidationError is the validation error returned by UUID.Validate if the
// designated constraints aren't met.
type UUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UUIDValidationError) ErrorName() string { return "UUIDValidationError" }

// Error satisfies the builtin error interface
func (e UUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UUIDValidationError{}

// Validate checks the field values on InetValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InetValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InetValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InetValueMultiError, or nil
// if none found.
func (m *InetValue) ValidateAll() error {
	return m.validate(true)
}

func (m *InetValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return InetValueMultiError(errors)
	}

	return nil
}

// InetValueMultiError is an error wrapping multiple validation errors returned
// by InetValue.ValidateAll() if the designated constraints aren't met.
type InetValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InetValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InetValueMultiError) AllErrors() []error { return m }

// InetValueValidationError is the validation error returned by
// InetValue.Validate if the designated constraints aren't met.
type InetValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InetValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InetValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InetValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InetValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InetValueValidationError) ErrorName() string { return "InetValueValidationError" }

// Error satisfies the builtin error interface
func (e InetValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInetValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InetValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InetValueValidationError{}

// Validate checks the field values on TimeOnly with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeOnly) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeOnly with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeOnlyMultiError, or nil
// if none found.
func (m *TimeOnly) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeOnly) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return TimeOnlyMultiError(errors)
	}

	return nil
}

// TimeOnlyMultiError is an error wrapping multiple validation errors returned
// by TimeOnly.ValidateAll() if the designated constraints aren't met.
type TimeOnlyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeOnlyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeOnlyMultiError) AllErrors() []error { return m }

// TimeOnlyValidationError is the validation error returned by
// TimeOnly.Validate if the designated constraints aren't met.
type TimeOnlyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeOnlyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeOnlyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeOnlyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeOnlyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeOnlyValidationError) ErrorName() string { return "TimeOnlyValidationError" }

// Error satisfies the builtin error interface
func (e TimeOnlyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeOnly.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeOnlyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeOnlyValidationError{}

// Validate checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BigInt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BigIntMultiError, or nil if none found.
func (m *BigInt) ValidateAll() error {
	return m.validate(true)
}

func (m *BigInt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return BigIntMultiError(errors)
	}

	return nil
}

// BigIntMultiError is an error wrapping multiple validation errors returned by
// BigInt.ValidateAll() if the designated constraints aren't met.
type BigIntMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigIntMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigIntMultiError) AllErrors() []error { return m }

// BigIntValidationError is the validation error returned by BigInt.Validate if
// the designated constraints aren't met.
type BigIntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigIntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigIntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigIntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigIntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigIntValidationError) ErrorName() string { return "BigIntValidationError" }

// Error satisfies the builtin error interface
func (e BigIntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigInt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigIntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigIntValidationError{}
