services:
  authorization:
    build:
      context: .
      args:
        GOLANG_TAG: ${GOLANG_TAG}
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    ports:
      - "8081:8081"
    expose:
      - "9091"
    networks:
      - app-network
    env_file:
      - .env

  nginx:
    image: nginx:${NGINX_TAG}
    depends_on:
      authorization:
        condition: service_started
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network

  postgres:
    image: postgres:${POSTGRES_TAG}
    restart: always
    hostname: ${POSTGRES_HOST}
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
    driver: local

